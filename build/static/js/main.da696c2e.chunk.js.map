{"version":3,"sources":["http-common.js","services/jobPost.service.js","components/add-jobPost.component.js","components/jobPost.component.js","components/jobPosts-list.component.js","services/auth.service.js","components/register.component.js","components/logIn.component.js","components/Bodyframe/Bodyframe.js","components/Footer/Footer.js","components/user-profile.component.js","App.js","serviceWorker.js","index.js","img/background_frame.png"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddJobPost","props","onChangeTitle","bind","onChangeDescription","onChangeJobType","saveJobPost","newJobPost","state","description","jobType","submitted","e","this","setState","target","value","JobPostDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","JobPost","getJobPost","updateJobPost","deleteJobPost","currentJobPost","message","match","params","prevState","update","history","push","JobPostsList","onChangeSearchTitle","retrieveJobPosts","refreshList","setActiveJobPost","removeAllJobPosts","searchTitle","jobPosts","currentIndex","getAll","jobPost","index","deleteAll","findByTitle","placeholder","map","key","to","API_URL","email","password","accessToken","localStorage","setItem","JSON","stringify","removeItem","username","parse","getItem","role","isEmail","vusername","length","vpassword","Register","handleRegister","onChangeUsername","onChangeEmail","onChangePassword","successful","preventDefault","form","validateAll","checkBtn","context","_errors","AuthService","register","error","resMessage","toString","onSubmit","ref","c","validations","style","display","logIn","handleLogin","loading","login","window","location","reload","disabled","imgStyle","zIndex","paddingTop","paddingBottom","width","height","mainBody","src","backgroundFrame","footerStyle","position","backgroundColor","fontStyle","color","Footer","class","Profile","currentUser","getCurrentUser","substring","substr","roles","App","logOut","showUserProfile","undefined","logout","Navbar","expand","Brand","fontFamily","fontSize","Toggle","aria-controls","Collapse","Nav","Link","href","exact","path","component","LogIn","UserProfile","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.da696c2e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"http://localhost:8080/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});","import http from \"../http-common\";\n\nclass JobPostDataService {\n  getAll() {\n    return http.get(\"/jobPosts\");\n  }\n\n  get(id) {\n    return http.get(`/jobPosts/${id}`);\n  }\n\n  create(data) {\n    return http.post(\"/jobPosts\", data);\n  }\n\n  update(id, data) {\n    return http.put(`/jobPosts/${id}`, data);\n  }\n\n  delete(id) {\n    return http.delete(`/jobPosts/${id}`);\n  }\n\n  deleteAll() {\n    return http.delete(`/jobPosts`);\n  }\n\n  findByTitle(title) {\n    return http.get(`/jobPosts?title=${title}`);\n  }\n}\n\nexport default new JobPostDataService();","import React, { Component } from \"react\";\nimport JobPostDataService from \"../services/jobPost.service\";\n\nexport default class AddJobPost extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeJobType = this.onChangeJobType.bind(this);\n    this.saveJobPost = this.saveJobPost.bind(this);\n    this.newJobPost = this.newJobPost.bind(this);\n\n    this.state = {\n      id: null,\n      title: \"\",\n      description: \"\", \n      jobType: \"\",\n\n      submitted: false\n    };\n  }\n\n  onChangeTitle(e) {\n    this.setState({\n      title: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  onChangeJobType(e) {\n    this.setState({\n      jobType: e.target.value\n    });\n  }\n\n  saveJobPost() {\n    var data = {\n      title: this.state.title,\n      description: this.state.description,\n      jobType: this.state.jobType\n    };\n\n    JobPostDataService.create(data)\n      .then(response => {\n        this.setState({\n          id: response.data.id,\n          title: response.data.title,\n          description: response.data.description,\n          jobType: response.data.jobType,\n\n          submitted: true\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  newJobPost() {\n    this.setState({\n      id: null,\n      title: \"\",\n      description: \"\",\n      jobType: \"\",\n\n      submitted: false\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"submit-form\">\n        {this.state.submitted ? (\n          <div>\n            <h4>You submitted successfully!</h4>\n            <button className=\"btn btn-success\" onClick={this.newJobPost}>\n              Add\n            </button>\n          </div>\n        ) : (\n          <div>\n            <div className=\"form-group\">\n              <label htmlFor=\"title\">Title</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"title\"\n                required\n                value={this.state.title}\n                onChange={this.onChangeTitle}\n                name=\"title\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"description\">Description</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"description\"\n                required\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                name=\"description\"\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"jobType\">Job Type</label>\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                id=\"jobType\"\n                required\n                value={this.state.jobType}\n                onChange={this.onChangeJobType}\n                name=\"jobType\"\n              />\n            </div>\n\n            <button onClick={this.saveJobPost} className=\"btn btn-success\">\n              Submit\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport JobPostDataService from \"../services/jobPost.service\";\n\nexport default class JobPost extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.getJobPost = this.getJobPost.bind(this);\n    this.updateJobPost = this.updateJobPost.bind(this);\n    this.deleteJobPost = this.deleteJobPost.bind(this);\n\n    this.state = {\n      currentJobPost: {\n        id: null,\n        title: \"\",\n        description: \"\",\n        jobType: \"\"\n      },\n      message: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.getJobPost(this.props.match.params.id);\n  }\n\n  onChangeTitle(e) {\n    const title = e.target.value;\n\n    this.setState(function(prevState) {\n      return {\n        currentJobPost: {\n          ...prevState.currentJobPost,\n          title: title\n        }\n      };\n    });\n  }\n\n  onChangeDescription(e) {\n    const description = e.target.value;\n    \n    this.setState(prevState => ({\n      currentJobPost: {\n        ...prevState.currentJobPost,\n        description: description\n      }\n    }));\n  }\n\n  onChangeJobType(e) {\n    const jobType = e.target.value;\n    \n    this.setState(prevState => ({\n      currentJobPost: {\n        ...prevState.currentJobPost,\n        jobType: jobType\n      }\n    }));\n  }\n\n\n  getJobPost(id) {\n    JobPostDataService.get(id)\n      .then(response => {\n        this.setState({\n          currentJobPost: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  updateJobPost() {\n    JobPostDataService.update(\n      this.state.currentJobPost.id,\n      this.state.currentJobPost\n    )\n      .then(response => {\n        console.log(response.data);\n        this.setState({\n          message: \"The jobPost was updated successfully!\"\n        });\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  deleteJobPost() {    \n    JobPostDataService.delete(this.state.currentJobPost.id)\n      .then(response => {\n        console.log(response.data);\n        this.props.history.push('/jobPosts')\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { currentJobPost } = this.state;\n\n    return (\n      <div>\n        {currentJobPost ? (\n          <div className=\"edit-form\">\n            <h4>JobPost</h4>\n            <form>\n              <div className=\"form-group\">\n                <label htmlFor=\"title\">Title</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"title\"\n                  value={currentJobPost.title}\n                  onChange={this.onChangeTitle}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"description\"\n                  value={currentJobPost.description}\n                  onChange={this.onChangeDescription}\n                />\n              </div>\n\n              <div className=\"form-group\">\n                <label>\n                  <strong>Job Type: </strong>\n                </label>\n                <input\n                  type=\"text\"\n                  className=\"form-control\"\n                  id=\"jobType\"\n                  value={currentJobPost.jobType}\n                  onChange={this.onChangeJobType}\n                />\n              </div>\n            </form>\n\n            <button\n              className=\"badge badge-danger mr-2\"\n              onClick={this.deleteJobPost}\n            >\n              Delete\n            </button>\n\n            <button\n              type=\"submit\"\n              className=\"badge badge-success\"\n              onClick={this.updateJobPost}\n            >\n              Update\n            </button>\n            <p>{this.state.message}</p>\n          </div>\n        ) : (\n          <div>\n            <br />\n            <p>Please click on a JobPost...</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport JobPostDataService from \"../services/jobPost.service\";\nimport { Link } from \"react-router-dom\";\n\nexport default class JobPostsList extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeSearchTitle = this.onChangeSearchTitle.bind(this);\n    this.retrieveJobPosts = this.retrieveJobPosts.bind(this);\n    this.refreshList = this.refreshList.bind(this);\n    this.setActiveJobPost = this.setActiveJobPost.bind(this);\n    this.removeAllJobPosts = this.removeAllJobPosts.bind(this);\n    this.searchTitle = this.searchTitle.bind(this);\n\n    this.state = {\n      jobPosts: [],\n      currentJobPost: null,\n      currentIndex: -1,\n      searchTitle: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.retrieveJobPosts();\n  }\n\n  onChangeSearchTitle(e) {\n    const searchTitle = e.target.value;\n\n    this.setState({\n      searchTitle: searchTitle\n    });\n  }\n\n  retrieveJobPosts() {\n    JobPostDataService.getAll()\n      .then(response => {\n        this.setState({\n          jobPosts: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  refreshList() {\n    this.retrieveJobPosts();\n    this.setState({\n      currentJobPost: null,\n      currentIndex: -1\n    });\n  }\n\n  setActiveJobPost(jobPost, index) {\n    this.setState({\n      currentJobPost: jobPost,\n      currentIndex: index\n    });\n  }\n\n  removeAllJobPosts() {\n    JobPostDataService.deleteAll()\n      .then(response => {\n        console.log(response.data);\n        this.refreshList();\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  searchTitle() {\n    JobPostDataService.findByTitle(this.state.searchTitle)\n      .then(response => {\n        this.setState({\n          jobPosts: response.data\n        });\n        console.log(response.data);\n      })\n      .catch(e => {\n        console.log(e);\n      });\n  }\n\n  render() {\n    const { searchTitle, jobPosts, currentJobPost, currentIndex } = this.state;\n\n    return (\n      <div className=\"list row\">\n        <div className=\"col-md-8\">\n          <div className=\"input-group mb-3\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search by title\"\n              value={searchTitle}\n              onChange={this.onChangeSearchTitle}\n            />\n            <div className=\"input-group-append\">\n              <button\n                className=\"btn btn-outline-secondary\"\n                type=\"button\"\n                onClick={this.searchTitle}\n              >\n                Search\n              </button>\n            </div>\n          </div>\n        </div>\n        <div className=\"col-md-6\">\n          <h4>Job Posts</h4>\n\n          <ul className=\"list-group\">\n            {jobPosts &&\n              jobPosts.map((jobPost, index) => (\n                <li\n                  className={\n                    \"list-group-item \" +\n                    (index === currentIndex ? \"active\" : \"\")\n                  }\n                  onClick={() => this.setActiveJobPost(jobPost, index)}\n                  key={index}\n                >\n                  {jobPost.title}\n                </li>\n              ))}\n          </ul>\n\n          <button\n            className=\"m-3 btn btn-sm btn-danger\"\n            onClick={this.removeAllJobPosts}\n          >\n            Remove All\n          </button>\n        </div>\n        <div className=\"col-md-6\">\n          {currentJobPost ? (\n            <div>\n              <h4>Job Post</h4>\n              <div>\n                <label>\n                  <strong>Title:</strong>\n                </label>{\" \"}\n                {currentJobPost.title}\n              </div>\n              <div>\n                <label>\n                  <strong>Description:</strong>\n                </label>{\" \"}\n                {currentJobPost.description}\n              </div>\n              <div>\n                <label>\n                  <strong>Job Type:</strong>\n                </label>{\" \"}\n                {currentJobPost.jobType}\n              </div>\n\n              <Link\n                to={\"/jobPosts/\" + currentJobPost.id}\n                className=\"badge badge-warning\"\n              >\n                Edit\n              </Link>\n            </div>\n          ) : (\n            <div>\n              <br />\n              <p>Please click on a JobPost...</p>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n","import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n    login(email, password) {\n        return axios\n            .post(API_URL + \"signin\", {\n                email,\n                password\n            })\n            .then(response => {\n                if (response.data.accessToken) {\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n\n                return response.data;\n            });\n    }\n\n    logout() {\n        localStorage.removeItem(\"user\");\n    }\n\n    register(username, email, password) {\n        return axios.post(API_URL + \"signup\", {\n            username,\n            email,\n            password\n        });\n    }\n\n    getCurrentUser() {\n        return JSON.parse(localStorage.getItem('user'));;\n    }\n}\n\nexport default new AuthService();","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = value => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        *Required field\n      </div>\n    );\n  }\n};\n\nconst email = value => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\nconst vusername = value => {\n  if (value.length < 3 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The username must be between 3 and 20 characters.\n      </div>\n    );\n  }\n};\n\nconst vpassword = value => {\n  if (value.length < 6 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The password must be between 6 and 40 characters.\n      </div>\n    );\n  }\n};\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      successful: false,\n      message: \"\"\n    };\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.register(\n        this.state.username,\n        this.state.email,\n        this.state.password\n      ).then(\n        response => {\n          this.setState({\n            message: response.data.message,\n            successful: true\n          });\n        },\n        error => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage\n          });\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <Form\n            onSubmit={this.handleRegister}\n            ref={c => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onChangeUsername}\n                    validations={[required, vusername]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Input\n                    type=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                </div>\n              </div>\n            )}\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={c => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport AuthService from \"../services/auth.service\";\nimport { isEmail } from \"validator\";\n\nconst required = value => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        *Required field\n      </div>\n    );\n  }\n};\n\nconst email = value => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\n\nexport default class logIn extends Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      message: \"\"\n    };\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      loading: true\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.login(this.state.email, this.state.password).then(\n        () => {\n          this.props.history.push(\"/\");\n          window.location.reload();\n        },\n        error => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            loading: false,\n            message: resMessage\n          });\n        }\n      );\n    } else {\n      this.setState({\n        loading: false\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container\">\n          <Form\n            onSubmit={this.handleLogin}\n            ref={c => {\n              this.form = c;\n            }}\n          >\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.onChangeEmail}\n                validations={[email]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.onChangePassword}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <button\n                className=\"btn btn-primary btn-block\"\n                disabled={this.state.loading}\n              >\n                {this.state.loading && (\n                  <span className=\"spinner-border spinner-border-sm\"></span>\n                )}\n                <span>Login</span>\n              </button>\n            </div>\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={c => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component, Fragment } from 'react';\nimport './Bodyframe.css'\nimport backgroundFrame from \"../../img/background_frame.png\"\n\nconst imgStyle = {\n    zIndex: '-1',\n    paddingTop: '50px',\n    paddingBottom: '50px',\n    width: '100%',\n    height: 'auto'\n}\n\n\nfunction mainBody() {\n    return (\n        <Fragment>\n            <img src={backgroundFrame} style={imgStyle}/>\n        </Fragment>\n    );\n}\n\nexport default mainBody;\n","import React, { Component, Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst footerStyle = {\n    position: 'absolute',\n    backgroundColor: '#2743A5',\n    width: '100%'\n}\n\nconst fontStyle = {\n    color: 'white'\n}\n\n\nfunction Footer () {\n    return (\n        <Fragment>\n            <footer style={footerStyle} class=\"page-footer font-small blue\">\n                <div style={fontStyle} class=\"footer-copyright text-left py-3\">\n                    © 2020 Copyright: Help!\n                </div>\n            </footer>\n        </Fragment>\n    );\n}\n\nexport default Footer;","import React, { Component } from \"react\";\nimport AuthService from \"../services/auth.service\";\n\nexport default class Profile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentUser: AuthService.getCurrentUser()\n    };\n  }\n\n  render() {\n    const { currentUser } = this.state;\n\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>\n            <strong>{currentUser.username}</strong> Profile\n          </h3>\n        </header>\n        <p>\n          <strong>Token:</strong>{\" \"}\n          {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n          {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n        </p>\n        <p>\n          <strong>Id:</strong>{\" \"}\n          {currentUser.id}\n        </p>\n        <p>\n          <strong>Email:</strong>{\" \"}\n          {currentUser.email}\n        </p>\n        <strong>Authorities:</strong>\n        <ul>\n          {currentUser.roles &&\n            currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n        </ul>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport AddJobPost from \"./components/add-jobPost.component\";\nimport JobPost from \"./components/jobPost.component\";\nimport JobPostsList from \"./components/jobPosts-list.component\";\nimport Register from \"./components/register.component\";\nimport LogIn from \"./components/logIn.component\";\nimport Bodyframe from './components/Bodyframe/Bodyframe.js';\nimport Footer from './components/Footer/Footer.js';\nimport UserProfile from \"./components/user-profile.component\";\nimport { Nav, Navbar } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Navbar.css'\nimport AuthService from \"./services/auth.service\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n\n    this.state = {\n      showUserProfile: false,\n      currentUser: undefined\n    };\n  }\n\n  componentDidMount() {\n    const user = AuthService.getCurrentUser;\n\n    if (user) {\n      this.setState({\n        currentUser: AuthService.getCurrentUser(),\n        showUserProfile: true\n      });\n    }\n  }\n\n  logOut() {\n    AuthService.logout();\n  }\n\n  render() {\n    const {currentUser}=this.state;\n    return (\n      <Router>\n        <Navbar style={{ backgroundColor: \"#2743A5\" }} expand=\"sm\">\n          <Navbar.Brand class=\"navBrand\" id=\"navBrand\" style={{ fontFamily: \"Racing Sans One\", color: \"white\", fontSize: \"30px\" }}>help!</Navbar.Brand>\n          <Navbar.Toggle id=\"collapseButton\" aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              {!currentUser && <Nav.Link href=\"/register\">Register</Nav.Link>}\n              <Nav.Link href=\"/jobPosts\">Job Board</Nav.Link>\n              <Nav.Link href=\"/add\">Add Job</Nav.Link>\n              {currentUser && <Nav.Link href=\"/userProfile\">My Profile</Nav.Link>}\n              {!currentUser && <Nav.Link href=\"/logIn\">Log In</Nav.Link>}\n              {currentUser && <Nav.Link href=\"/logIn\" onClick={this.logOut}>Log Out</Nav.Link>}\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n        <div>\n          <div className=\"container mt-3\">\n            <Switch>\n              <Route exact path=\"/logIn\" component={LogIn} />\n              <Route exact path=\"/register\" component={Register} />\n              <Route exact path={[\"/\", \"/jobPosts\"]} component={JobPostsList} />\n              <Route exact path=\"/add\" component={AddJobPost} />\n              <Route path=\"/jobPosts/:id\" component={JobPost} />\n              <Route path=\"/userProfile\" component={UserProfile}/>\n            </Switch>\n          </div>\n          <Bodyframe />\n        </div>\n        <Footer />\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background_frame.fb7d453b.png\";"],"sourceRoot":""}